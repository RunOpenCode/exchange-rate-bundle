imports:
    - { resource: security.yml }
framework:
    test: ~
    session:
        storage_id: session.storage.mock_file
    profiler:
        collect: false
    translator:      { fallbacks: [en] }
    secret:          not_so_secret
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection:
        enabled: true
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  en
    trusted_hosts:   ~
    fragments:       ~
    http_method_override: true
    assets: ~

twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

runopencode_exchange_rate:
    base_currency: RSD
    rates:
        - { currency_code: EUR, rate_type: median, source: test_source }
        - { currency_code: CHF, rate_type: median, source: test_source }
        - { currency_code: USD, rate_type: median, source: test_source }
    file_repository:
        path: "%kernel.root_dir%/../var/cache/database.dat"
    sources:
        test_source: RunOpenCode\Bundle\ExchangeRate\Tests\Fixtures\Source\DummySource
    security:
        enabled: true
        view: [ 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN' ]
        create: [ 'ROLE_SUPER_ADMIN' ]
        edit: [ 'ROLE_SUPER_ADMIN' ]
        delete: [ 'ROLE_SUPER_ADMIN' ]

services:

    decorated_repository:
        class: RunOpenCode\Bundle\ExchangeRate\Tests\Fixtures\Repository\RepositoryDecorator
        decorates: runopencode.exchange_rate.repository
        decoration_inner_name: repository.original
        arguments: [ '@repository.original' ]

    decorated_csrf_token_manager:
        class: RunOpenCode\Bundle\ExchangeRate\Tests\Fixtures\Csrf\CsrfTokenManager
        decorates: security.csrf.token_manager
        decoration_inner_name: security.csrf.token_manager.original
        arguments: [ '@security.csrf.token_manager.original' ]
